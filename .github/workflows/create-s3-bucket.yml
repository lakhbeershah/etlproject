name: Create S3 Bucket

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: "Globally-unique S3 bucket name (lowercase/hyphens)"
        required: false
      region:
        description: "AWS region (defaults to repo variable AWS_REGION)"
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  create-bucket:
    runs-on: ubuntu-latest
    env:
      ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      DEFAULT_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ inputs.region || env.DEFAULT_REGION }}

      - name: Resolve inputs and sanitize bucket name
        id: vars
        run: |
          REGION="${{ inputs.region || env.DEFAULT_REGION }}"
          RAW_REPO="${{ github.repository }}"
          DEFAULT_NAME="gh-${RAW_REPO//\//-}-${{ github.run_number }}"
          DEFAULT_NAME=$(echo "$DEFAULT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          BUCKET="${{ inputs.bucket_name || '' }}"
          if [ -z "$BUCKET" ]; then BUCKET="$DEFAULT_NAME"; fi
          echo "region=$REGION" >> $GITHUB_OUTPUT
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT

      - name: Show plan
        run: |
          echo "Region   : ${{ steps.vars.outputs.region }}"
          echo "Bucket   : ${{ steps.vars.outputs.bucket }}"

      - name: Create bucket if needed (idempotent)
        run: |
          set -euo pipefail
          REGION="${{ steps.vars.outputs.region }}"
          BUCKET="${{ steps.vars.outputs.bucket }}"
          echo "Checking if bucket exists..."
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "Bucket already exists (and you have access): $BUCKET"
          else
            echo "Creating bucket: $BUCKET in $REGION"
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET"
            else
              aws s3api create-bucket --bucket "$BUCKET" \
                --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
          fi

      - name: Enable default encryption (SSE-S3)
        run: |
          aws s3api put-bucket-encryption --bucket "${{ steps.vars.outputs.bucket }}" --server-side-encryption-configuration '{
            "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]
          }'

      - name: Enable versioning
        run: |
          aws s3api put-bucket-versioning --bucket "${{ steps.vars.outputs.bucket }}" \
            --versioning-configuration Status=Enabled

      - name: Block all public access
        run: |
          aws s3api put-public-access-block --bucket "${{ steps.vars.outputs.bucket }}" \
            --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true

      - name: Deny insecure (non-HTTPS) access with a bucket policy
        run: |
          BUCKET="${{ steps.vars.outputs.bucket }}"
          cat > policy.json <<EOF
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Sid": "DenyInsecureTransport",
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": ["arn:aws:s3:::$BUCKET","arn:aws:s3:::$BUCKET/*"],
              "Condition": {"Bool": {"aws:SecureTransport": "false"}}
            }]
          }
          EOF
          aws s3api put-bucket-policy --bucket "$BUCKET" --policy file://policy.json

      - name: Final output
        run: |
          echo "âœ… S3 bucket ready: s3://${{ steps.vars.outputs.bucket }} in ${{ steps.vars.outputs.region }}"
